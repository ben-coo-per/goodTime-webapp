datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}



/// The user model
model User {
  id                    String    @id @default(cuid())
  displayName           String?
  phoneNumber           String    @unique  /// We're using this as the 'username' field

  hashedPassword        String
  salt                  String
  resetToken            String?
  resetTokenExpiresAt   DateTime?

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt @default(now())

  eventsOwned           Event[]       /// Collection of all of the events this person owns
  timeRanges            TimeRange[]   /// Collection of all of the timeranges this person says they are available for
}

/// Events are what the app is built around.
/// Each event is populated with a collection of time ranges to show when people are available.
model Event {
  id          Int         @id @default(autoincrement())
  name        String?
  createdAt   DateTime    @default(now())
  times       TimeRange[] /// The array of timeranges holds all both the original selections (by the owner) and all availabilities associated with this event
  owner       User        @relation(fields: [ownerId], references: [id]) /// The owner is whoever creates the event
  ownerId     String
}

/// Time Ranges are windows of time assigned to both a user and event.
/// They show the times that the user is available for that specific event.
model TimeRange {
  id          Int         @id @default(autoincrement())

  startTime   Int         /// The beginning of the time range in UNIX time
  endTime     Int         /// The end of the time range in UNIX time
  createdAt   DateTime    @default(now())

  event       Event       @relation(fields: [eventId], references: [id])  /// Each timerange needs to be attached to an event
  eventId     Int

  user        User        @relation(fields: [userId], references: [id])   /// Each timerange needs to be attached to a user
  userId      String

}

/// Feedback submissions how I will keep track of user feedback because I don't want to set up or pay for a messaging API because there will likely be very little fb
model FeedbackSubmission {
  id           Int       @id @default(autoincrement())

  message      String
  email        String

  createdAt    DateTime  @default(now())
}
